<%
	#index_base = (@page_num - 1) * @items_per_page;
	canvas_size = {
		:width => 200,
		:height => 200
	} 
%>

<script type="text/javascript">
function onSelectCategoryChanged(selectDiv){
	var val = selectDiv.value; 
	if(val == 'new'){
		$(selectDiv).val($(selectDiv).attr("valueholder"));
		var newCat = apprise("Please input new category name",{input:true},function(newCat){
			if(newCat){
				console.log(newCat);
				$.ajax({
					url: '/admin/ax_category_new',
					type: 'POST', dataType: 'json',
					data: "name=" + newCat,
					success:function(responseObj, textStatus, jqXHR){ 
						if(responseObj.success !== 1){
							//error
							apprise("Error just happened = " + responseObj.msg);
							return;
						}
						
						var data = responseObj.data;
						window.globals.categories = data.all_categories;
						
						forEachProductId(redoSelectCategoryOptions);
						 
						$(selectDiv).val(data.new_category.category_id); 
						$(selectDiv).attr("valueholder",selectDiv.value); 
					}
				})
			}
		});   
		
		 
	} else {
		$(selectDiv).attr("valueholder",selectDiv.value);
	}
} 
function redoSelectCategoryOptions(productId){ 
	var selectDiv = $(getInputCategoryId(productId));
	selectDiv.empty();
	 
	var cats = window.globals.categories;
	var len = cats.length;
	var options = "<option value=''></option>";
	for(var i = 0 ; i < len ; i++){
		var cc = cats[i];
		var cat_id = cc['category_id'];
		var cat_name = cc['name'];
		options += "<option value='"+cat_id+"'>"+cat_name+"</option>";
		//console.log("appending cat_id="+cat_id);
	}
	options += "<option value='new'>-- Create New --</option>";
	selectDiv.append(options);
	
	selectDiv.val(selectDiv.attr("valueholder"));
	 
} 
function clearCanvasAndDeleteTempImage(productId){
	var canvasId = getCanvasId(productId);
	var ctx = $(canvasId)[0].getContext('2d');
	ctx.clearRect( 0 , 0 , <%=canvas_size[:width]%>,<%=canvas_size[:height]%> ); 
	
	var fileTempId = $(getInputFileTmpHolderId(productId)).val();
	if(fileTempId){ 
		$.ajax({
			url:"/admin/ax_file_delete",
			type: "POST",
			data: { file_tmp_id:fileTempId }
		});
		
	} 
	$(getInputFileTmpHolderId(productId)).val("-1"); // This tells server that the pic is removed
	return ctx;
}
function renderCanvasFromURL(productId , dataURL){  
	var ctx = clearCanvasAndDeleteTempImage(productId);
	var img = new Image;
	img.onload = function(){
	  ctx.drawImage(img,0,0,<%=canvas_size[:width]%>,<%=canvas_size[:height]%> ); // Or at whatever offset you like
	}; 
	img.src = dataURL;	
}
function renderCanvasFromLocalAndUpload(productId , file){
	var ctx = clearCanvasAndDeleteTempImage(productId);
	
	// render to canvas
    var reader = new FileReader;
    reader.onload = function(event) {
    	// render to canvas
        var img = new Image;
        img.onload = function() {
            ctx.drawImage(img, 0,0,<%=canvas_size[:width]%>,<%=canvas_size[:height]%> );
        }
        img.src = event.target.result;
    }
    reader.readAsDataURL(file);	
    
    
    // upload now
    $(getInputFileTmpHolderId(productId)).val(-9);  // trigger that currently it's in progress
	var fileUploader = new FileUploadRequest(file);
	fileUploader.send(function(responseObject){
		if(responseObject.success !== 1){
			alert("Something wrong with the upload="+responseObject.msg);
			return;
		}
		
		var data = responseObject.data;
		var fileTmpId = data.file_tmp_id;
		
		$(getInputFileTmpHolderId(productId)).val(fileTmpId);
	}); 
}
function renderCanvasWithInitialImage(productId){ 
	var dataUrl = $(getCanvasId(productId)).attr("dataurl"); 
	if(dataUrl === ""){
		// no image specified... 
		dataUrl = window.globals.imageNotFoundPath; 
	}  
	renderCanvasFromURL(productId,dataUrl); 
} 
function processFilePreview(productId,file){
	renderCanvasFromLocalAndUpload(productId,file); 
	$(getCanvasRemoveBtnId(productId)).show();// display the remove btn
	displayFormChangedState(productId); 
} 

function setupFormEventsDetection(productId){   
	var product = window.globals.productsById[productId];
	if(!product) apprise("Error happened. Product must not be null");
	
	$(getInputNameId(productId)).keyup(function(e){
		var name = "";
		if(product.name) name = product.name;
		if($(this).val() != name) displayFormChangedState(productId); 
	}); 
	
	$(getInputDescriptionId(productId)).keyup(function(e){
		var description = "";
		if(product.description) description = product.description;
		if($(this).val() != description) displayFormChangedState(productId);
	});
	
	$(getInputPriceId(productId)).keyup(function(e){
		var price = "";
		if(product.price) price = product.price;
		if($(this).val() != price) displayFormChangedState(productId);
	});
	
	$(getInputCategoryId(productId))[0].addEventListener("change",function(e){
		var catId = "";
		if(product.category) catId = product.category.category_id; 
		if($(this).val() != (catId)) displayFormChangedState(productId);
	});
	
	$(getInputIsEnabledId(productId))[0].addEventListener("change",function(e){
		var isEnabled = true;
		if(product.is_enabled) isEnabled = product.is_enabled;
		if( $(this).is(':checked') !=  isEnabled) displayFormChangedState(productId);
	});
	
	$(getSaveBtnId(productId)).click(function(e){
		e.preventDefault();
		e.stopPropagation();
		productUpload(productId); 
	});
	$(getDeleteBtnId(productId)).click(function(e){
		e.preventDefault();
		e.stopPropagation();
		apprise("Once you delete it can't be brought back",{verify:true},function(r){
			if(r){ productDelete(productId); }
		});
	});		 
	$(getCancelNewBtnId(productId)).click(function(e){
		// Cancel is only when it's a temp
		if(isNaN(productId)===false){
			apprise("Error... somehow the ID is all numbers which is a real product instead of tmp");
			return;
		}
		
		productDelete(productId,false);
	});
	
	$(getCanvasId(productId)).click(function(){ 
		$(getFileInputBtnId(productId)).click();
	});	 
	$(getFileInputBtnId(productId)).change(function(event){
		var file = event.target.files[0];
		processFilePreview(productId,file);
	});
	$(getCanvasRemoveBtnId(productId)).click(function(){
		// remove the image back to default 
		renderCanvasFromURL(productId,window.globals.imageNotFoundPath); 
		displayFormChangedState(productId);
	});		 	
	
	//Setup DND
	var _stopPropagation = function(e){
		e.stopPropagation();
		e.preventDefault();
	};   
	var dropbox = document.getElementById(getFormContentId(productId,false));  
	dropbox.addEventListener("dragenter", _stopPropagation, false);  
	dropbox.addEventListener("dragover", _stopPropagation, false);  
	dropbox.addEventListener("drop", function(e){ 
		_stopPropagation(e);
		var dt = e.dataTransfer;  
		var file = dt.files[0];
		processFilePreview(productId , file); 
	}, false);  	
}

function displayFormChangedState(productId){
	$(getSaveBtnId(productId)).show();
	$(getDeleteBtnId(productId)).hide(); 
	$(getFormContentId(productId)).addClass("modified");
	setProductIdBeingEdited(productId,true);
}
function displayFormUnchangedState(productId){
	$(getSaveBtnId(productId)).hide();
	$(getDeleteBtnId(productId)).show();	
	$(getFormContentId(productId)).removeClass("modified");
	$(getCancelNewBtnId(productId)).hide(); // always hide
	setProductIdBeingEdited(productId,false);
}

function productUpload(productId){ 
	var serializedData = $(getFormId(productId)).serialize()
	if(serializedData.indexOf("file_tmp_id=-9") >= 0){
		// TODO: block here and wait until this done before proceeding
		console.log(serializedData);
		apprise("TODO: put loadmask here It's still loading...");
		return;
	}
	
	$.ajax({
		url: '/admin/ax_product_submit',
		type: 'POST',
		data: serializedData,
		success: function(responseObject){ 
			if(responseObject.success!=1){
				apprise("Failed to submit changes = "+responseObject.msg);
				return;
			}
			
			$(getInputFileTmpHolderId(productId)).val("");  // empty it out
			displayFormUnchangedState(productId);
			convertProductId( productId , responseObject.data.product.product_id , responseObject.data.product ); 
		}
	});
}
function productDelete(productId , serverDeletionDefaultTrue){
	var deleteDiv = function(){
		window.globals.productIds = window.globals.productIds.splice(window.globals.productIds.indexOf(productId));
		delete window.globals.productsById[productId];
		$(getFormContentId(productId)).fadeOut(1000,function(){
			$(this).remove();
		});	
		setProductIdBeingEdited(productId,false);
	};
	
	
	if( serverDeletionDefaultTrue === false ){
		deleteDiv();
		
	}else{
		$.ajax({
			url: '/admin/ax_product_delete',
			type: 'POST',
			data: {
				product_id: productId
			},
			success: function(responseObject){ 
				if(responseObject.success!=1){
					apprise("Failed to delete = "+responseObject.msg);
					return;
				}
				
				deleteDiv();
			}
		});
	}
}
function productCreateNew(){
	// Create tmp product id
	// As long as this contains at least a non-integer char then its guaranteed
	//  to not collide with real product id
	var tmpProductId = "tmp_" + (new Date()).getTime();
	window.globals.productIds.splice(0,0,tmpProductId);
	window.globals.productsById[tmpProductId] ={
		product_id: tmpProductId,
		is_enabled: true,
		category_id: "",
		name: "",
		description: "",
		price: "",
		thumbnail_url: "",
	};
	
	$(getTableRowItemBoxId()).prepend(getTableRow(window.globals.productsById[tmpProductId],"new"));
	
	redoSelectCategoryOptions(tmpProductId);
	renderCanvasWithInitialImage(tmpProductId);
	displayFormChangedState(tmpProductId);
	setupFormEventsDetection(tmpProductId); 
	
	// This is the only place where it got shown
	$(getCancelNewBtnId(tmpProductId)).show()
}

function convertProductId(oldProductId , newProductId , newProductData){
	// deal with key
	var indexInArray = window.globals.productIds.indexOf(oldProductId);
	window.globals.productIds[indexInArray] = newProductId;
	
	// deal with value
	window.globals.productsById[newProductId] = newProductData;
	
	var oldIdSuffix = "-" + oldProductId;
	var newIdSuffix = "-" + newProductId;
	$('[id$="'+oldIdSuffix+'"]').each(function(index,div){
		var oldId = $(div).attr("id");
		var newId = oldId.replace(oldIdSuffix,newIdSuffix);
		$(div).attr("id",newId);
	});	
}

//////////////////////////// VARIABLES, IDS, GENERAL GETTERS/ACCESSORS

function setProductIdBeingEdited(productId , isBeingEdited){ 
	var index = window.globals.productIdsBeingEdited.indexOf(productId); 
	if(isBeingEdited){
		if(index >= 0){
			// already in array do nothing
		}else{ 
			window.globals.productIdsBeingEdited.push(productId);
		}
	}else{
		// unset 
		if(index >= 0){ 
			window.globals.productIdsBeingEdited.splice(index,1); 
		}else{
			// not in array do nothing
		}	
	}
} 

function forEachProductId(functionToCall){
	var pids = window.globals.productIds;
	var ll = pids.length;
	for(var i = 0 ; i < ll ; i++){
		var pid = pids[i];
		functionToCall(pid);
	}
}

function getTableRowItemBoxId(prependHashDefaultTrue){
	var id = 'table_row_item_box';
	return (prependHashDefaultTrue===false?id:"#"+id);
}
// You don't really want to use this unless you're submitting since the child of
//  this form is unpredictable in some browsers due to their auto-correct mechanism
function getFormId(productId , prependHashDefaultTrue){
	var id = "form-" + productId;
	return (prependHashDefaultTrue===false?id:"#"+id);
}

// This is the "tr" , pretty much the whole row.
function getFormContentId(productId , prependHashDefaultTrue){
	var id = "form-content-" + productId;
	return (prependHashDefaultTrue===false?id:"#"+id);
}
function getCanvasId(productId , prependHashDefaultTrue){
	var id = "form-canvas-" + productId;
	return (prependHashDefaultTrue===false?id:"#"+id);
}
function getCanvasRemoveBtnId(productId , prependHashDefaultTrue){
	var id = "form-canvas-remove-btn-" + productId;
	return (prependHashDefaultTrue===false?id:"#"+id);
} 
function getSaveBtnId(productId, prependHashDefaultTrue){
	var id = "save-btn-" + productId;
	return (prependHashDefaultTrue===false?id:"#"+id);	
}
function getDeleteBtnId(productId, prependHashDefaultTrue){
	var id = "delete-btn-" + productId;
	return (prependHashDefaultTrue===false?id:"#"+id);	
}
function getCancelNewBtnId(productId, prependHashDefaultTrue){
	var id = "cancel-new-btn-" + productId;
	return (prependHashDefaultTrue===false?id:"#"+id);	
}
function getFileInputBtnId(productId , prependHashDefaultTrue){
	var id = "input-file-btn-" + productId;
	return (prependHashDefaultTrue===false?id:"#"+id);
}

function getInputNameId(productId , prependHashDefaultTrue){
	var id = "form-input-name-" + productId;
	return (prependHashDefaultTrue===false?id:"#"+id);
}
function getInputDescriptionId(productId , prependHashDefaultTrue){
	var id = "form-input-description-" + productId;
	return (prependHashDefaultTrue===false?id:"#"+id);
}
function getInputPriceId(productId , prependHashDefaultTrue){
	var id = "form-input-price-" + productId;
	return (prependHashDefaultTrue===false?id:"#"+id);
}
function getInputCategoryId(productId , prependHashDefaultTrue){
	var id = "form-input-category-" + productId;
	return (prependHashDefaultTrue===false?id:"#"+id);
}
function getInputIsEnabledId(productId , prependHashDefaultTrue){
	var id = "form-input-is-enabled-" + productId;
	return (prependHashDefaultTrue===false?id:"#"+id);
}
function getInputFileTmpHolderId(productId , prependHashDefaultTrue){
	var id = "form-input-file-tmp-id-" + productId;
	return (prependHashDefaultTrue===false?id:"#"+id);
} 



window.paginatorCallback = function(pageNum){ 
	window.location = "/admin/products?page_num=" + pageNum;
};  

function initGlobals(){
	window.globals = {
		productIds: <%=raw (@products.collect{|p| p[:product_id]}).to_json %>,
		categories : <%=raw @categories.to_json%>,
		itemsPerPage: <%=@items_per_page%>, 
		imageNotFoundPath: "/images/admin/image-not-found.png",
		tableRowTemplate: "<%=escape_javascript table_row_item_box_tr%>",
		productIdsBeingEdited: [],
		onBeforeUnload: function(){
			if(window.globals.productIdsBeingEdited.length > 0) {
				console.log(window.globals.productIdsBeingEdited);
				//return "Some changes are unsaved. Sure you want to navigate away?";
			}
		}
	};
	// assign productsById
	var productsById = {};
	var products = <%=raw @products.to_json%>;
	var ll = products.length;
	for(var i = 0 ;i  < ll ; i++){
		var product =  products[i];
		productsById[product.product_id] = product;
	}
	window.globals.productsById = productsById;	
}

function insertTableRows( ){
	var index = 0;
	var table = $(getTableRowItemBoxId());
	
	var ll = window.globals.productIds.length; 
	for(var i = 0 ; i< ll ; i++){
		var pid = window.globals.productIds[i];
		var product = window.globals.productsById[pid];  
		var css = (i%2 == 0 ? "even" : "odd");
		var tr = getTableRow(product,css);
		table.append(tr);
	};
}

function getTableRow(product,contentCSS){ 
	var template = String(window.globals.tableRowTemplate);  // Copy!
	for(var key in product){
		var templateKey = "__" + key + "__";
		var regEx = new RegExp(templateKey,"g");
		template = template.replace(regEx,product[key]);
	}
	
	
	// In case new product we don't want it to crash
	var catId = "";
	if(product.category) catId = product.category.category_id;  
	
	// Do other substitution
	template = template.replace(/__category_id__/g,catId);
	template = template.replace(/__content_css__/g,contentCSS);
	template = template.replace(/__canvas_height__/g,"<%=canvas_size[:height]%>");
	template = template.replace(/__canvas_width__/g,"<%=canvas_size[:width]%>");
	//console.log("--temlate");
	//console.log(template);
	return template;
}

window.onActionViewReady = function(){ 
	initGlobals(); 
	insertTableRows();
	forEachProductId(redoSelectCategoryOptions); 
	forEachProductId(renderCanvasWithInitialImage); 
	forEachProductId(setupFormEventsDetection);
	
	window.onbeforeunload = window.globals.onBeforeUnload;
};



</script>

<input type='button' id='create-new-btn' value='Create New' onclick="productCreateNew()"/>
<br /><br />
<%= admin_paginator :page_num=>@page_num,:total_items => @total_items,  :js_callback => 'window.paginatorCallback'%> 
 
<br /><br /> 
<table id='table_row_item_box' class='table_row_item_box'  >
</table> 
<br /><br />
 
<%= admin_paginator :page_num=>@page_num,:total_items => @total_items,   :js_callback => 'window.paginatorCallback'%> 

