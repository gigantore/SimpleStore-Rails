<% 
	canvas_size = {
		:width => 200,
		:height => 200
	} 
%>

<%= stylesheet_link_tag "display_admin/products.css" %> 
<%= stylesheet_link_tag "templates/product" %>
<%= javascript_include_tag "templates/product" %>

<script type="text/javascript">
function onSelectCategoryChanged(selectDiv){
	var val = selectDiv.value; 
	if(val == 'new'){
		$(selectDiv).val($(selectDiv).attr("valueholder"));
		var newCat = apprise("Please input new category name",{input:true},function(newCat){
			if(newCat){
				console.log(newCat);
				$.ajax({
					url: '/admin/ax_category_new',
					type: 'POST', dataType: 'json',
					data: "name=" + newCat,
					success:function(responseObj, textStatus, jqXHR){ 
						if(responseObj.success !== 1){
							//error
							apprise("Error just happened = " + responseObj.msg);
							return;
						}
						
						var data = responseObj.data;
						window.globals.categories = data.all_categories;
						
						forEachProductId(redoSelectCategoryOptions);
						 
						$(selectDiv).val(data.new_category.category_id); 
						$(selectDiv).attr("valueholder",selectDiv.value); 
					}
				})
			}
		});   
		
		 
	} else {
		$(selectDiv).attr("valueholder",selectDiv.value);
	}
} 
function redoSelectCategoryOptions(productId){ 
	var productTmpl = new ProductTmpl(productId);
	
	var selectDiv = $(productTmpl.ids.inputCategoryId);
	selectDiv.empty();
	 
	var cats = window.globals.categories;
	var len = cats.length;
	var options = "<option value=''></option>";
	for(var i = 0 ; i < len ; i++){
		var cc = cats[i];
		var cat_id = cc['category_id'];
		var cat_name = cc['name'];
		options += "<option value='"+cat_id+"'>"+cat_name+"</option>";
		//console.log("appending cat_id="+cat_id);
	}
	options += "<option value='new'>-- Create New --</option>";
	selectDiv.append(options);
	
	selectDiv.val(selectDiv.attr("valueholder"));
	 
}  
function setupFormEventsDetection(productId){   
	var product = window.globals.productsById[productId];
	if(!product) apprise("Error happened. Product must not be null");
	
	var productTmpl = new ProductTmpl(productId);
	var ids = productTmpl.ids;
	
	$(ids.inputNameId).keyup(function(e){
		var name = "";
		if(product.name) name = product.name;
		if($(this).val() != name) displayFormChangedState(productId); 
	}); 
	
	$(ids.inputDescriptionId).keyup(function(e){
		var description = "";
		if(product.description) description = product.description;
		if($(this).val() != description) displayFormChangedState(productId);
	});
	
	$(ids.inputPriceId).keyup(function(e){
		var price = "";
		if(product.price) price = product.price;
		if($(this).val() != price) displayFormChangedState(productId);
	});
	
	$(ids.inputCategoryId)[0].addEventListener("change",function(e){
		var catId = "";
		if(product.category) catId = product.category.category_id; 
		if($(this).val() != (catId)) displayFormChangedState(productId);
	});
	
	$(ids.inputIsEnabledId)[0].addEventListener("change",function(e){
		var isEnabled = true;
		if(typeof(product.is_enabled) != "undefined") isEnabled = product.is_enabled;
		if( $(this).is(':checked') !=  isEnabled) displayFormChangedState(productId);
	});
	
	$(ids.saveBtnId).click(function(e){
		e.preventDefault();
		e.stopPropagation();
		productUpload(productId); 
	});
	$(ids.deleteBtnId).click(function(e){
		e.preventDefault();
		e.stopPropagation();
		apprise("Once you delete it can't be brought back",{verify:true},function(r){
			if(r){ productDelete(productId); }
		});
	});		 
	$(ids.cancelNewBtnId).click(function(e){
		// Cancel is only when it's a temp
		if(isNaN(productId)===false){
			apprise("Error... somehow the ID is all numbers which is a real product instead of tmp");
			return;
		}
		
		productDelete(productId,false);
	});
	
	var imageuploader = $(ids.imageAreaId).imageuploader({
		dndArea: ids.topContainerId,
		imageUrl:  product.thumbnail_url
	});
	imageuploader.bind("imageuploader.imagechanged",function(){
		displayFormChangedState(productId);
	});
	 
}

function displayFormChangedState(productId){
	var productTmpl = new ProductTmpl(productId);
	var ids = productTmpl.ids;
	
	$(ids.saveBtnId).show();
	$(ids.deleteBtnId).hide(); 
	$(ids.topContainerId).addClass("modified");
	setProductIdBeingEdited(productId,true);
}
function displayFormUnchangedState(productId){
	var productTmpl = new ProductTmpl(productId);
	var ids = productTmpl.ids;

	$(ids.saveBtnId).hide();
	$(ids.deleteBtnId).show();	
	$(ids.topContainerId).removeClass("modified");
	$(ids.cancelNewBtnId).hide(); // always hide
	setProductIdBeingEdited(productId,false);
}

function productUpload(productId){ 
	var productTmpl = new ProductTmpl(productId);
	var ids = productTmpl.ids;

	var serializedData = $(ids.formId).serialize();
	 
	var fileTmpIds = $(ids.imageAreaId).imageuploader("getFileTmpId"); 
	if(fileTmpIds.length !== 1){
		apprise("Internal Error: returned ids len is != 1 ");
	}
	var fileTmpId = parseInt(fileTmpIds[0],10);
	if(fileTmpId === -9){ 
		$(ids.topContainerId).mask("Still uploading image please wait...");
		setTimeout(function(){
			productUpload(productId);
		},1000);
		return;
	}
	serializedData += "&file_tmp_id="+fileTmpId;
	 
	var product = window.globals.productsById[productId];
	serializedData += "&attr="+JSON.stringify(product.attr); 
	

	var url = "/product/" + productId; //default update
	var type = "PUT";
	if(isNaN(productId)){ //new
		url = "/product";
		type = "POST";
	}
	
	$.ajaxWithMask({
		url:url,
		type:type,
		data: serializedData,
		success: function(responseObject){ 
			if(responseObject.success!=1){
				apprise("Failed to submit changes = "+responseObject.msg);
				return;
			}
			
			$(ids.inputFileTmpHolderId).val("");  // empty it out
			displayFormUnchangedState(productId);
			convertProductId( productId , responseObject.data.product.product_id , responseObject.data.product ); 
		},
		loadMaskQuery: ids.topContainerId
	});
}
function productDelete(productId , serverDeletionDefaultTrue){
	var productTmpl = new ProductTmpl(productId);
	var ids = productTmpl.ids;

	var deleteDiv = function(){
		window.globals.productIds = window.globals.productIds.splice(window.globals.productIds.indexOf(productId));
		delete window.globals.productsById[productId];
		$(ids.topContainerId).fadeOut(1000,function(){
			$(this).remove();
		});	
		setProductIdBeingEdited(productId,false);
	};
	
	
	if( serverDeletionDefaultTrue === false ){
		deleteDiv();
		
	}else{
		$.ajaxWithMask({
			url: '/product/' + productId,
			type: 'DELETE',
			success: function(responseObject){ 
				if(responseObject.success!=1){
					apprise("Failed to delete = "+responseObject.msg);
					return;
				} 
				deleteDiv();
			},
			loadMaskQuery: ids.topContainerId
		});
	}
}
function productCreateNew(){
	// Create tmp product id
	// As long as this contains at least a non-integer char then its guaranteed
	//  to not collide with real product id
	var tmpProductId = "tmp_" + (new Date()).getTime();
	var colorCode = getRandomColorCode();
	window.globals.productIds.splice(0,0,tmpProductId);
	var productData ={
		product_id: tmpProductId,
		is_enabled: true,
		category_id: "",
		name: "Name",
		description: "Description",
		price: "",
		thumbnail_url: "",
		attr:{
			color: colorCode
		}
	};
	window.globals.productsById[tmpProductId] = productData;
	 
	productData['content_level_style'] = "background-color:"+colorCode+";";
	
	$(getProductCollectionsDivId()).prepend(
		compileProductTemplate(tmpProductId , productData)		
	);
	
	redoSelectCategoryOptions(tmpProductId); 
	displayFormChangedState(tmpProductId);
	setupFormEventsDetection(tmpProductId); 
	
	// This is the only place where it got shown
	var productTmpl = new ProductTmpl(tmpProductId);
	$(productTmpl.ids.cancelNewBtnId).show()
}

function convertProductId(oldProductId , newProductId , newProductData){
 
	// deal with key
	var indexInArray = window.globals.productIds.indexOf(oldProductId);
	window.globals.productIds[indexInArray] = newProductId;
	
	// deal with value
	window.globals.productsById[newProductId] = newProductData;


	var productTmpl = new ProductTmpl(oldProductId);
	productTmpl.migrateExistingCompiledTemplateTo(newProductId);

}

//////////////////////////// VARIABLES, IDS, GENERAL GETTERS/ACCESSORS
function getRandomColorCode(){
	var cc = window.globals.colorCodes;
	var l = cc.length;
	return cc[Math.floor(Math.random()*l)];
}
function getProductCollectionsDivId(prependHashDefaultTrue){
	var id = 'product_collections';
	return (prependHashDefaultTrue===false?id:"#"+id);
}
function setProductIdBeingEdited(productId , isBeingEdited){ 
	var index = window.globals.productIdsBeingEdited.indexOf(productId); 
	if(isBeingEdited){
		if(index >= 0){
			// already in array do nothing
		}else{ 
			window.globals.productIdsBeingEdited.push(productId);
		}
	}else{
		// unset 
		if(index >= 0){ 
			window.globals.productIdsBeingEdited.splice(index,1); 
		}else{
			// not in array do nothing
		}	
	}
} 

function forEachProductId(functionToCall){
	var pids = window.globals.productIds;
	var ll = pids.length;
	for(var i = 0 ; i < ll ; i++){
		var pid = pids[i];
		functionToCall(pid);
	}
}




window.paginatorCallback = function(pageNum){ 
	window.location = "/display_admin/products?page_num=" + pageNum;
};  

function initGlobals(){
	window.globals = {
		productIds: <%=raw (@products_compact.collect{|p| p[:product_id]}).to_json %>,
		categories : <%=raw @categories_compact.to_json%>,
		itemsPerPage: <%=@items_per_page%>, 
		//imageNotFoundPath: "/images/admin/image-not-found.png",
		tableRowTemplate: "<%=escape_javascript render :partial => 'templates/product'%>",
		productIdsBeingEdited: [],
		onBeforeUnload: function(){
			if(window.globals.productIdsBeingEdited.length > 0) {
				console.log(window.globals.productIdsBeingEdited);
				//return "Some changes are unsaved. Sure you want to navigate away?";
			}
		},
		colorCodes: [
			"#ADFF2F",
			"#98FB98",
			"#66CDAA",
			"#AFEEEE",
			"#D8BFD8",
			"#FFF8DC",
			"#F4A460",
			"#FFC0CB",
			"#FFE4B5"
		]
	};
	// assign productsById
	var productsById = {};
	var products = <%=raw @products_compact.to_json%>;
	var ll = products.length;
	for(var i = 0 ;i  < ll ; i++){
		var product =  products[i];
		productsById[product.product_id] = product;
	}
	window.globals.productsById = productsById;	
}

function insertTableRows( ){

	var index = 0;
	var collectionsDiv = $(getProductCollectionsDivId());
	
	var ll = window.globals.productIds.length; 
	for(var i = 0 ; i< ll ; i++){
		var pid = window.globals.productIds[i];
		var product = window.globals.productsById[pid]; 
		collectionsDiv.append(compileProductTemplate(pid,product));
	}
} 

function compileProductTemplate(pid, product){
	var productTmpl = new ProductTmpl(pid); 
	var compiledStr = productTmpl.compile(window.globals.tableRowTemplate , 
		$.extend(product,{
			content_level_style: "background-color:"+product.attr.color+";",
			canvas_height: <%=canvas_size[:height]%>,
			canvas_width: <%=canvas_size[:width]%>
		})
	); 
	return compiledStr;
}

$(document).ready(function(){ 

	initGlobals(); 
	insertTableRows();
	forEachProductId(redoSelectCategoryOptions);   
	forEachProductId(setupFormEventsDetection); 
	window.onbeforeunload = window.globals.onBeforeUnload;
	
});



</script>

<input type='button' id='create-new-btn' value='Create New' onclick="productCreateNew()"/>
<br /><br />
<%= admin_paginator :page_num=>@page_num,:total_items => @total_items,  :js_callback => 'window.paginatorCallback'%> 
 
<br /><br /> 
<div id='product_collections' >
</div> 
<br /><br />

<div>
<%= admin_paginator :page_num=>@page_num,:total_items => @total_items,   :js_callback => 'window.paginatorCallback'%> 

